<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html>

        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
          <title>Chapter 5</title>
          <link rel="stylesheet" href="styles/pygments.css" type="text/css" />
          <link rel="stylesheet" href="styles/softcover.css" type="text/css" />
          <link rel="stylesheet" href="styles/epub.css" type="text/css" />
          <link rel="stylesheet" href="styles/custom.css" type="text/css"/>
          <link rel="stylesheet" href="styles/custom_epub.css" type="text/css"/>
          <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="styles/page-template.xpgt" />
        </head>

        <body>
          <div id="cid31" class="chapter"><h1><a href="go-basics-5-arrays-and-slices-in-go_fragment.xhtml#cid31" class="heading hyperref"><span class="number">Chapter 5 </span>Arrays and Slices</a></h1>
</div><div id="cid32" class="section"><h2><a href="go-basics-5-arrays-and-slices-in-go_fragment.xhtml#cid32" class="heading hyperref"><span class="number">5.1 </span>Arrays</a></h2>
<p>Arrays, unlike slices, are fixed in length.<span class="intersentencespace"></span> Meaning, that when you create them, you need to specify how many elements are within the array.<span class="intersentencespace"></span> Arrays can only contain one type, meaning you <strong>cannot</strong> have an array with both <code>string</code> and <code>int</code> types.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">i</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [1 2 3], [3]int</span>
<span class="cm">*/</span>
</pre></div></div>
<p>The syntax for an array in Go works like this.<span class="intersentencespace"></span> We first use <code>[]</code> which represents the array.<span class="intersentencespace"></span> <code>[3]</code> says that there are 3 elements in this array.<span class="intersentencespace"></span> <code>[3]int</code> says that the 3 items in the array are of the type <code>int</code>.<span class="intersentencespace"></span> <code>{1, 2, 3}</code> are the values within the array.</p>
<p>So in the example above, we are telling the compiler that variable <code>i</code> is an array that contains 3 <code>int</code>’s whose values are 1, 2, 3.</p>
<p>You can also create arrays with an alternative syntax like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">i</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [1 2 3], [3]int</span>
<span class="cm">*/</span>
</pre></div></div>
<p>The <code>[...]</code> tells the compiler to create an array to the exact length of the values I am creating it with.<span class="intersentencespace"></span> Since this array contains three values, the length is also 3.</p>
<p>Arrays can also be initialized without values as well.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">i</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [0 0 0], [3]int</span>
<span class="cm">*/</span>
</pre></div></div>
<p>Since we are creating an array with the type of <code>int</code> the compiler fills it with and <code>int</code>’s zero value, which in this case is zero.<span class="intersentencespace"></span> If we do the same thing with strings, we get the following:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">s</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">string</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [  ], [3]string</span>
<span class="cm">*/</span>
</pre></div></div>
<p>To populate our array, we need to specify the index in the array and then give it a value.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">s</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">string</span>
  <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">"Hello"</span> <span class="c1">// place the string "Hello" as the 1st item</span>
  <span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">"World"</span> <span class="c1">// place the string "World" as the 2nd item</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [Hello World ], [3]string</span>
<span class="cm">*/</span>
</pre></div></div>
<p>To get an element out of the array, we use the same <code>[]</code> syntax to specify which element we want from the array.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">s</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">string</span>
  <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">"Hello"</span>
  <span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">"World"</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v"</span><span class="p">,</span> <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">// s[0] says give me the first item in the array</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  Hello</span>
<span class="cm">*/</span>
</pre></div></div>
<p>If we need to get the length of an array, we can use the built-in <code>len()</code> function.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">s</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">string</span>
  <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">"Hello"</span>
  <span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">"World"</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v"</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  3</span>
<span class="cm">*/</span>
</pre></div></div>
<p><em><strong>Remember that even though there are only 2 elements in the example above, when we created the array we specified that it would contain 3 elements of type <code>string</code>.</strong></em><em></em></p>
<p>Arrays can also contain other arrays.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">a</span> <span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span>
	<span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
	<span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
	<span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [[1 2 3] [4 5 6] [7 8 9]]</span>
<span class="cm">*/</span>
</pre></div></div>
<p>Arrays are also passed by value in Go.<span class="intersentencespace"></span> So when you make a copy of the array, you make a copy and do not reference the original.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">a</span>
	<span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">14</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>



<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [1 2 3]</span>
<span class="cm">  [1 14 3]</span>
<span class="cm">  [1 2 3]</span>
<span class="cm">*/</span>
</pre></div></div>
<p>If you need to modify the original array, you can use a <code>pointer</code>.<span class="intersentencespace"></span> You can learn more about pointers in <a href="/go-basics-10-pointers-in-go" rel="noopener">Go Basics - 10.<span class="intersentencespace"></span> Pointers in Go</a>.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">a</span> <span class="c1">// &amp; is the reference operator</span>
	<span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">14</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [1 14 3]</span>
<span class="cm">  &amp;[1 14 3] // this means that the variable b is 'pointing' to a, not making a copy of it like earlier</span>
<span class="cm">  [1 14 3]</span>
<span class="cm">*/</span>
</pre></div></div>
</div><div id="cid33" class="section"><h2><a href="go-basics-5-arrays-and-slices-in-go_fragment.xhtml#cid33" class="heading hyperref"><span class="number">5.2 </span>Slice</a></h2>
<p>Slices are more common in Go, as they behave similarly to arrays.<span class="intersentencespace"></span> However, they <strong>are not</strong> initialized with a specific length.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [1 2 3], []int</span>
<span class="cm">*/</span>
</pre></div></div>
<p>We use the same syntax as arrays <strong>without</strong> specifying the length.</p>
<p>If we need to get the length of a slice, we can use the built-in <code>len()</code> function.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v"</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  3</span>
<span class="cm">*/</span>
</pre></div></div>
<p>Slices, unlike arrays, are passed by reference, <strong>not by value</strong>.<span class="intersentencespace"></span> This means that when you make a copy of a slice, you are pointing to the original.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">a</span>
	<span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">14</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [1 14 3]</span>
<span class="cm">  [1 14 3]</span>
<span class="cm">  [1 14 3]</span>
<span class="cm">*/</span>
</pre></div></div>
<p>Slices can also be created with a special syntax when you want to only get some of the elements out of the original array, like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[:]</span>   <span class="c1">// all of the elements in a</span>
	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>  <span class="c1">// start from the 2nd element to the end</span>
	<span class="nx">d</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span>  <span class="c1">// the first 3 elements</span>
	<span class="nx">e</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// start from the 3rd element to the 4th</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [1 2 3 4 5]</span>
<span class="cm">  [1 2 3 4 5]</span>
<span class="cm">  [2 3 4 5]</span>
<span class="cm">  [1 2 3]</span>
<span class="cm">  [3 4]</span>
<span class="cm">*/</span>
</pre></div></div>
<p>The number on the left side, <code>3:</code> is <strong>inclusive</strong>, while the number on the right side <code>:3</code> is <strong>exclusive</strong>.</p>
<blockquote class="quotation"><p class="quote">These same slicing operations also work for arrays!<span class="intersentencespace"></span></p>
</blockquote><div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[:]</span>   <span class="c1">// all of the elements in a</span>
	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>  <span class="c1">// start from the 2nd element to the end</span>
	<span class="nx">d</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span>  <span class="c1">// the first 3 elements</span>
	<span class="nx">e</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// start from the 3rd element to the 4th</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T\n"</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [1 2 3 4 5], [5]int</span>
<span class="cm">  [1 2 3 4 5]</span>
<span class="cm">  [2 3 4 5]</span>
<span class="cm">  [1 2 3]</span>
<span class="cm">  [3 4]</span>
<span class="cm">*/</span>
</pre></div></div>
<p>To add items to our slice, we can use the <code>append()</code> function.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>

	<span class="nx">a</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
	<span class="nx">a</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  []</span>
<span class="cm">  [1 2]</span>
<span class="cm">*/</span>
</pre></div></div>
<p><code>append()</code> can also take multiple values at the same time, also known as <code>variadic arguments</code>.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>

	<span class="nx">a</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  []</span>
<span class="cm">  [1 2 3 4 5 6 7 8 9 10]</span>
<span class="cm">*/</span>
</pre></div></div>
<p>you can also concatenate 2 slices together like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
  <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>

	<span class="nx">a</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="o">...</span><span class="p">)</span> <span class="c1">// the ... operator extracts all of the values from the slice b</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  [4 5 6]</span>
<span class="cm">  [4 5 6 1 2 3]</span>
<span class="cm">*/</span>
</pre></div></div>
<p>Since <code>a</code> is a <code>slice</code> of <code>int</code>, it can only accept the <code>int</code> type.<span class="intersentencespace"></span> If we try to append <code>b</code>, which is a <code>slice</code> of <code>int</code> the compiler fails.<span class="intersentencespace"></span> However, we can use <code>...</code><span class="intersentencespace"></span> to extract or <code>destructure</code> the <code>slice</code> to get all of the
values from it and append those values to <code>a</code>.</p>
</div><div id="cid34" class="section"><h2><a href="go-basics-5-arrays-and-slices-in-go_fragment.xhtml#cid34" class="heading hyperref"><span class="number">5.3 </span>Wrap Up</a></h2>
<p>In this article, we learned about how to create and work with arrays and slices in go.</p>
</div><div id="cid35" class="section"><h2><a href="go-basics-5-arrays-and-slices-in-go_fragment.xhtml#cid35" class="heading hyperref"><span class="number">5.4 </span>Additional Resources</a></h2>
<ul>
<li> <a href="https://golang.org/pkg" rel="noopener">Golang.org Packages</a>
</li>
<li> <a href="https://gobyexample.com/" rel="noopener">Go by Example</a>
</li>
<li> <a href="https://www.youtube.com/watch?v=YS4e4q9oBaU" rel="noopener">Free Code Camp - Learn Go Programming for Beginners</a>
</li></ul>
</div>
        </body>
        </html>