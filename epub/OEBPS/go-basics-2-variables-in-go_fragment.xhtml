<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html>

        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
          <title>Chapter 2</title>
          <link rel="stylesheet" href="styles/pygments.css" type="text/css" />
          <link rel="stylesheet" href="styles/softcover.css" type="text/css" />
          <link rel="stylesheet" href="styles/epub.css" type="text/css" />
          <link rel="stylesheet" href="styles/custom.css" type="text/css"/>
          <link rel="stylesheet" href="styles/custom_epub.css" type="text/css"/>
          <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="styles/page-template.xpgt" />
        </head>

        <body>
          <div id="cid6" class="chapter"><h1><a href="go-basics-2-variables-in-go_fragment.xhtml#cid6" class="heading hyperref"><span class="number">Chapter 2 </span>Variables</a></h1>
</div><div id="cid7" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid7" class="heading hyperref"><span class="number">2.1 </span>Variable declaration</a></h2>
<p>There are 3 different ways you can declare variables in Go.</p>
<div id="uid3" class="subsection"><h3><a href="go-basics-2-variables-in-go_fragment.xhtml#uid3" class="heading hyperref"><span class="number">2.1.1 </span>Variable declaration - Method 1</a></h3>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">foo</span> <span class="kt">string</span>
	<span class="nx">foo</span> <span class="p">=</span> <span class="s">"Hello, World!"</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is: Hello, World!</span>
<span class="cm">*/</span>
</pre></div></div>
</div>
<div id="uid4" class="subsection"><h3><a href="go-basics-2-variables-in-go_fragment.xhtml#uid4" class="heading hyperref"><span class="number">2.1.2 </span>Variable declaration - Method 2</a></h3>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">foo</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"Hello, World!"</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is: Hello, World!</span>
<span class="cm">*/</span>
</pre></div></div>
</div>
<div id="uid5" class="subsection"><h3><a href="go-basics-2-variables-in-go_fragment.xhtml#uid5" class="heading hyperref"><span class="number">2.1.3 </span>Variable declaration - Method 3 (The most common and widely used)</a></h3>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">foo</span> <span class="o">:=</span> <span class="s">"Hello, World!"</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is: Hello, World!</span>
<span class="cm">*/</span>
</pre></div></div>
<p>Letâ€™s look at some common reasons why you might use one method vs another.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="c1">// Method #1</span>
<span class="kd">var</span> <span class="nx">foo</span> <span class="kt">string</span>
</pre></div></div>
<p>This method is useful when you want to initialize a variable and then set it sometime later on in your code.<span class="intersentencespace"></span> Say for instance after looping through something.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="c1">// Method #2</span>
<span class="kd">var</span> <span class="nx">foo</span> <span class="kt">float32</span> <span class="p">=</span> <span class="mi">14</span>
</pre></div></div>
<p>This method is useful when you want to be very specific about the type that the variable is.<span class="intersentencespace"></span> Sometimes the Go compiler will not correctly infer the type you want.<span class="intersentencespace"></span> Using this method ensures the Go compiler knows the exact type you want.</p>
<div class="code"><div class="highlight"><pre><span></span><span class="c1">// Method #3</span>
<span class="nx">foo</span> <span class="o">:=</span> <span class="mi">14</span>
</pre></div></div>
<p>This is the most common method of declaring variables.<span class="intersentencespace"></span> If you are comfortable with the types that the Go compiler infers, use this method.</p>
</div></div><div id="cid8" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid8" class="heading hyperref"><span class="number">2.2 </span>Package Level Variables</a></h2>
<p>In the previous examples, all of our variables are declared inside of the main function, like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">foo</span> <span class="o">:=</span> <span class="s">"Hello, World!"</span>

<span class="p">}</span>
</pre></div></div>
<p>However, we can also declare variables at the <code>package</code> level, a.k.a.<span class="intersentencespace"></span> outside of the <code>func main()</code> or any function for that matter, like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">foo</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"Hello, World!"</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span>

<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is: Hello, World!</span>
<span class="cm">*/</span>
</pre></div></div>
<p><em><strong>Note: We cannot use the <code>:=</code> syntax to declare variables outside of functions!</strong></em><em></em></p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="nx">foo</span> <span class="o">:=</span> <span class="s">"Hello, World!"</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span>

<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  syntax error: non-declaration statement outside function body</span>
<span class="cm">*/</span>
</pre></div></div>
</div><div id="cid9" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid9" class="heading hyperref"><span class="number">2.3 </span>Declaring multiple variables at the same time</a></h2>
<p>You can also declare multiple variables, at the package level, at the same time, like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="p">(</span>
  <span class="nx">name</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"Robert"</span>
  <span class="nx">age</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">34</span>
  <span class="nx">favoriteFood</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"Sushi"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"My name is %v, I am %v, and my favorite food is %v"</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">favoriteFood</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  My name is Robert, I am 34, and my favorite food is Sushi</span>
<span class="cm">*/</span>
</pre></div></div>
</div><div id="cid10" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid10" class="heading hyperref"><span class="number">2.4 </span>Variable shadowing</a></h2>
<p>Variable shadowing has to do with <code>scope</code>.<span class="intersentencespace"></span> Letâ€™s take a look at an example:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"Robert"</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"John"</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is: John</span>
<span class="cm">*/</span>
</pre></div></div>
<p>Go uses the variable that is closest in <code>scope</code>, which in this case is the string <code>John</code>.<span class="intersentencespace"></span> This works, because one variable is declared at the <code>package</code> level, while the other is declared inside of a <code>function</code>, a.k.a.<span class="intersentencespace"></span> <code>shadowing</code>.</p>
<p>You <strong>cannot</strong> however, do this:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"John"</span>
  <span class="nx">name</span> <span class="o">:=</span> <span class="s">"Robert"</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  no new variables on left side of :=</span>
<span class="cm">*/</span>
</pre></div></div>
<p>This does not work because both of these variables are within the same <code>scope</code>.</p>
</div><div id="cid11" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid11" class="heading hyperref"><span class="number">2.5 </span>Unused variables</a></h2>
<p>Go has some great features that help to keep your code clean.<span class="intersentencespace"></span> If you declare a variable, you must use it.<span class="intersentencespace"></span> Otherwise, the compiler will throw an error, like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">age</span> <span class="o">:=</span> <span class="mi">50</span>
  <span class="nx">name</span> <span class="o">:=</span> <span class="s">"Robert"</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  age declared and not used</span>
<span class="cm">*/</span>
</pre></div></div>
</div><div id="cid12" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid12" class="heading hyperref"><span class="number">2.6 </span>Variable Scope</a></h2>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"Robert"</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>

<span class="p">}</span>
</pre></div></div>
<p>Variables that being with a lowercase letter, like the <code>name</code> variable above, are scoped to the <code>package</code>, ie: it can only be used inside of this <code>package</code>.</p>
<p>However, if I use an upper case letter, like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kd">var</span> <span class="nx">Name</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"Robert"</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>

<span class="p">}</span>
</pre></div></div>
<p>The Go compiler will <code>export</code> or <code>expose</code> this function outside of this package for use inside of other packages.</p>
<p>If a variable is declared inside of a function, like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">"Robert"</span>
<span class="p">}</span>
</pre></div></div>
<p>Then the variable is <code>block</code> scoped and can only be accessed inside of the <code>main()</code> function.</p>
</div><div id="cid13" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid13" class="heading hyperref"><span class="number">2.7 </span>Variable Type conversion</a></h2>
<p>Take a look at this exmaple:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span><span class="p">(</span><span class="s">"fmt"</span><span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">age</span> <span class="o">:=</span> <span class="mi">14</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T\n"</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span>

  <span class="kd">var</span> <span class="nx">ageFloat</span> <span class="kt">float32</span> <span class="p">=</span> <span class="nb">float32</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">ageFloat</span><span class="p">,</span> <span class="nx">ageFloat</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  14, int</span>
<span class="cm">  14, float32</span>
<span class="cm">*/</span>
</pre></div></div>
<p><em><strong><code>%v</code> stands for value and <code>%T</code> stands for type</strong></em><em></em></p>
<p>Using the <code>float32()</code> function, I can easily change the type of <code>int</code> to a <code>float32</code>.</p>
</div><div id="cid14" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid14" class="heading hyperref"><span class="number">2.8 </span>Converting numbers to strings</a></h2>
<p>A <code>string</code> in Go is a <code>string</code> of <code>bytes</code>.<span class="intersentencespace"></span> So if we wanted to convert an <code>int</code> to a <code>string</code>, we would need to use an additional package, like so:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span><span class="p">(</span>
  <span class="s">"fmt"</span>
  <span class="s">"strconv"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">age</span> <span class="o">:=</span> <span class="mi">14</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T\n"</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span>

  <span class="kd">var</span> <span class="nx">ageString</span> <span class="kt">string</span> <span class="p">=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Itoa</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">ageString</span><span class="p">,</span> <span class="nx">ageString</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  14, int</span>
<span class="cm">  14, string</span>
<span class="cm">*/</span>
</pre></div></div>
<p>Otherwise, you get an unexpected result, like this:</p>
<div class="code"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">age</span> <span class="o">:=</span> <span class="mi">47</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T\n"</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span>

	<span class="kd">var</span> <span class="nx">ageString</span> <span class="kt">string</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">"%v, %T"</span><span class="p">,</span> <span class="nx">ageString</span><span class="p">,</span> <span class="nx">ageString</span><span class="p">)</span>
<span class="p">}</span>


<span class="cm">/*</span>
<span class="cm">  The result of the code above is:</span>
<span class="cm">  14, int</span>
<span class="cm">, string</span>
<span class="cm">*/</span>
</pre></div></div>
<p>The reason is that since a <code>string</code> in Go is a <code>string</code> of <code>bytes</code> it is looking for the ascii character represented by the number 14, which in this case is the character <code>/</code>.</p>
</div><div id="cid15" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid15" class="heading hyperref"><span class="number">2.9 </span>Wrap Up</a></h2>
<p>In this article, we discussed the following topics when it comes to variables:</p>
<ul>
<li> Variable declaration
</li>
<li> Variable shadowing
</li>
<li> Variable Scope
</li>
<li> Variable Type conversion
</li></ul>
</div><div id="cid16" class="section"><h2><a href="go-basics-2-variables-in-go_fragment.xhtml#cid16" class="heading hyperref"><span class="number">2.10 </span>Additional Resources</a></h2>
<ul>
<li> <a href="https://golang.org/" rel="noopener">Golang.org</a>
</li>
<li> <a href="https://www.youtube.com/watch?v=YS4e4q9oBaU" rel="noopener">Free Code Camp - Learn Go Programming for Beginners</a>
</li></ul>
</div>
        </body>
        </html>